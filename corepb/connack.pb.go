// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connack.proto

package corepb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnAck struct {
	Code     int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Datetime int32 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (m *ConnAck) Reset()         { *m = ConnAck{} }
func (m *ConnAck) String() string { return proto.CompactTextString(m) }
func (*ConnAck) ProtoMessage()    {}
func (*ConnAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_625a0f8d6f909c2e, []int{0}
}
func (m *ConnAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnAck.Merge(m, src)
}
func (m *ConnAck) XXX_Size() int {
	return m.Size()
}
func (m *ConnAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnAck.DiscardUnknown(m)
}

var xxx_messageInfo_ConnAck proto.InternalMessageInfo

func (m *ConnAck) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ConnAck) GetDatetime() int32 {
	if m != nil {
		return m.Datetime
	}
	return 0
}

func init() {
	proto.RegisterType((*ConnAck)(nil), "corepb.ConnAck")
}

func init() { proto.RegisterFile("connack.proto", fileDescriptor_625a0f8d6f909c2e) }

var fileDescriptor_625a0f8d6f909c2e = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xcb,
	0x4b, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce, 0x2f, 0x4a, 0x2d,
	0x48, 0x52, 0xb2, 0xe4, 0x62, 0x77, 0xce, 0xcf, 0xcb, 0x73, 0x4c, 0xce, 0x16, 0x12, 0xe2, 0x62,
	0x49, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x85, 0xa4, 0xb8,
	0x38, 0x52, 0x12, 0x4b, 0x52, 0x4b, 0x32, 0x73, 0x53, 0x25, 0x98, 0xc0, 0xe2, 0x70, 0xbe, 0x93,
	0xc2, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1,
	0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x41, 0x0d, 0x4f, 0x62, 0x03,
	0xdb, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x59, 0xa2, 0xf1, 0x7c, 0x00, 0x00, 0x00,
}

func (m *ConnAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Datetime != 0 {
		i = encodeVarintConnack(dAtA, i, uint64(m.Datetime))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintConnack(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConnack(dAtA []byte, offset int, v uint64) int {
	offset -= sovConnack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConnAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovConnack(uint64(m.Code))
	}
	if m.Datetime != 0 {
		n += 1 + sovConnack(uint64(m.Datetime))
	}
	return n
}

func sovConnack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConnack(x uint64) (n int) {
	return sovConnack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConnAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datetime", wireType)
			}
			m.Datetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Datetime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConnack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConnack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConnack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConnack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConnack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConnack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConnack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConnack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConnack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConnack = fmt.Errorf("proto: unexpected end of group")
)
